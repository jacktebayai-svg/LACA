Below is a **concise, engineering-grade build manual** for the Master Aesthetics Suite. It is written as a technical spec only (no roadmaps, no recommendations).

---

# Master Aesthetics Suite — Technical Build Manual

## 1. Scope & Capabilities

**System Type:** Multitenant SaaS for aesthetics clinics & solo practitioners.
**Capabilities:** Tenant onboarding, brand websites, booking & availability, deposits & payments, client profiles & medical history, consent generation & e-sign, aftercare/policies, CRM & notifications, marketing automations, analytics, theming/white-label, AI personalization, search, audit & compliance.

---

## 2. Technology Baseline

**Languages:** TypeScript (strict), SQL.
**Frontend:** Next.js 14 (App Router, RSC), React 18, TailwindCSS, Radix UI, Framer Motion, React Hook Form, Zod, React Query, Zustand, react-day-picker, Stripe Elements.
**Backend:** NestJS + Fastify (API), Prisma (PostgreSQL + pgvector), BullMQ (Redis), OpenAPI + GraphQL, tRPC (internal), Meilisearch/OpenSearch.
**Infra:** AWS ECS Fargate, RDS Postgres, ElastiCache Redis, S3 + CloudFront, ACM, WAF, Route53, KMS, SSM Parameter Store, ALB.
**Observability:** Datadog (APM, Logs, RUM), Sentry (FE/BE), OpenTelemetry.
**CI/CD:** GitHub Actions → ECR → ECS.
**Auth:** OIDC (Clerk/Auth0).
**Payments:** Stripe (Elements + Webhooks, optional Connect).
**Comms:** SendGrid (Email), Twilio (SMS/WhatsApp).

---

## 3. Monorepo Layout

```
/master-aesthetics-suite
├─ apps/
│  ├─ web/                   # Tenant websites + booking + client portal
│  ├─ admin/                 # Tenant backoffice & support console
│  ├─ api/                   # NestJS API gateway & domain services
│  └─ worker/                # BullMQ consumers, schedulers, indexers
├─ packages/
│  ├─ ui/                    # Design system components & tokens
│  ├─ db/                    # Prisma schema & client
│  ├─ shared/                # DTOs, Zod schemas, events, feature flags
│  ├─ ai/                    # AI orchestration, prompts, guards
│  ├─ email-templates/       # MJML/Handlebars templates & preview
│  └─ sdk/                   # Partner/3P SDK (JS/TS)
├─ infra/
│  ├─ terraform/             # AWS modules & env stacks
│  ├─ docker/                # Dockerfiles & local compose
│  └─ k6/                    # Load-test scripts
├─ tests/
│  ├─ e2e/                   # Playwright suites
│  └─ contract/              # Pact contracts
├─ docs/                     # Architecture, API, runbooks, DPIA
├─ .github/workflows/        # CI/CD pipelines
├─ turbo.json                # Turborepo config
├─ pnpm-workspace.yaml
└─ package.json
```

---

## 4. Environment Matrix

| Env     | Purpose   | Data        | Domains                  | Secrets          |
| ------- | --------- | ----------- | ------------------------ | ---------------- |
| dev     | local/dev | synthetic   | localhost                | .env.local files |
| staging | pre-prod  | masked prod | \*.stg.<domain>          | AWS SSM          |
| prod    | live      | real        | \*.app.<domain> / custom | AWS SSM + KMS    |

---

## 5. Configuration & Conventions

* **TS:** `strict: true`, path aliases (`@ui`, `@shared`, `@db`, `@ai`).
* **Lint/Format:** ESLint (Airbnb + custom), Prettier.
* **Commits:** Conventional Commits.
* **Feature Flags:** `packages/shared/flags.ts`.
* **I18n:** English default; keys in `packages/shared/i18n/*.json`.
* **Time Zones:** Store UTC, render with tenant/location TZ.

---

## 6. Data Model (Prisma)

```prisma
// packages/db/schema.prisma
generator client { provider = "prisma-client-js" }
datasource db     { provider = "postgresql"; url = env("DATABASE_URL") }

model Tenant { id String @id @default(cuid()) name String plan String createdAt DateTime @default(now()) }

model User   { id String @id @default(cuid()) email String @unique authProviderId String createdAt DateTime @default(now()) }

enum Role { OWNER MANAGER PRACTITIONER FRONTDESK FINANCE SUPPORT }

model UserRole { id String @id @default(cuid()) userId String tenantId String role Role locationId String? }

model Brand {
  id String @id @default(cuid())
  tenantId String
  domain   String?
  subdomain String?
  theme    Json
  seo      Json?
}

model Location { id String @id @default(cuid()) tenantId String timezone String address Json settings Json }

model Service {
  id String @id @default(cuid())
  tenantId String
  name String
  slug String @unique
  description String?
  basePrice Int
  durationMin Int
  category String
  buffers Json? // prep/cleanup mins
  isActive Boolean @default(true)
}

model Practitioner {
  id String @id @default(cuid())
  tenantId String
  userId String
  specialties String[]
  availability Json // rules: weekly, exceptions
  profile Json
}

model Client {
  id String @id @default(cuid())
  tenantId String
  personal Json
  preferences Json?
  tags String[]
  createdAt DateTime @default(now())
}

model MedicalHistory {
  id String @id @default(cuid())
  clientId String
  data Json
  version Int
  createdAt DateTime @default(now())
}

enum AppointmentStatus { PENDING_DEPOSIT SCHEDULED COMPLETED CANCELLED NO_SHOW }

model Appointment {
  id String @id @default(cuid())
  tenantId String
  clientId String
  practitionerId String
  serviceId String
  locationId String
  startTs DateTime
  endTs DateTime
  status AppointmentStatus
  notes String?
  policyVersion Int
}

enum PaymentStatus { REQUIRES_ACTION SUCCEEDED FAILED REFUNDED PARTIAL_REFUND }

model Payment {
  id String @id @default(cuid())
  tenantId String
  appointmentId String
  stripePiId String?
  amountCents Int
  currency String
  status PaymentStatus
  depositCents Int @default(0)
}

model Template {
  id String @id @default(cuid())
  tenantId String?    // null → global
  type String         // consent, aftercare, policy
  jurisdiction String // e.g., UK
  version String
  content Json        // blocks with placeholders
  mandatoryBlocks String[]
  effectiveFrom DateTime
  effectiveTo   DateTime?
}

model Document {
  id String @id @default(cuid())
  tenantId String
  clientId String?
  type String
  content Json
  version String
  locked Boolean @default(false)
  signedAt DateTime?
  expiresAt DateTime?
  stampHash String?
}

model EsignSession {
  id String @id @default(cuid())
  documentId String
  clientId String
  status String   // created, sent, signed, void
  envelope Json
}

model Event {
  id String @id @default(cuid())
  tenantId String
  actorId  String?
  type String
  payload Json
  occurredAt DateTime @default(now())
}

model Campaign   { id String @id @default(cuid()) tenantId String type String content Json scheduleTs DateTime? status String }
model Message    { id String @id @default(cuid()) tenantId String channel String toRef String templateId String? payload Json status String error String? }
```

**Indexes:** `(tenantId, …)` on all domain tables; GIN on JSON fields used by filters; pgvector on embeddings (AI retrieval).

---

## 7. API Surface

### REST (OpenAPI)

```
POST /v1/tenants
GET  /v1/me

GET  /v1/availability?location_id&service_id&from&to
POST /v1/appointments
PATCH /v1/appointments/:id
POST /v1/payments/deposit-intent
POST /v1/payments/finalize

POST /v1/clients
PUT  /v1/clients/:id/medical
GET  /v1/clients/:id/timeline

POST /v1/documents/generate
POST /v1/documents/:id/esign
GET  /v1/documents/:id/pdf

POST /v1/campaigns
POST /v1/automations
GET  /v1/analytics/kpis?range

POST /webhooks/stripe
POST /webhooks/twilio
```

### GraphQL (admin/internal)

```graphql
type Query {
  me: Me!
  tenant(id: ID!): Tenant
  services: [Service!]!
  clients(search: String): [Client!]!
  appointments(range: DateRange!): [Appointment!]!
  templates(type: String!): [Template!]!
}

type Mutation {
  createAppointment(input: CreateAppointment!): Appointment!
  updateAppointment(id: ID!, patch: UpdateAppointment!): Appointment!
  generateDocument(input: GenerateDocument!): Document!
  createCampaign(input: CampaignInput!): Campaign!
}
```

---

## 8. Authentication & Authorization

* **AuthN:** OIDC; backend receives verified ID token; sessions via JWT (short-lived) + refresh; service-to-service via signed JWT.
* **AuthZ:** RBAC roles + ABAC for location scope.
* **RLS (optional):** Postgres Row Level Security on all tenant tables (policy predicates `tenant_id = current_setting('app.tenant_id')`).

---

## 9. Booking & Availability

**Inputs:** service duration & buffers, practitioner availability, location hours, resource constraints (room/device), tenant policies.
**Slot Grid:** 15-minute steps (configurable).
**Algorithm:**

1. Build base intervals from opening hours & practitioner rules.
2. Subtract busy intervals (existing appts + holds).
3. Apply duration + buffers.
4. Lock on reservation create (Redis mutex), idempotency key.
   **Cache:** Redis key `avail:{tenant}:{location}:{service}:{date}` TTL 60s.

**Reservation → Appointment:**

* `PENDING_DEPOSIT` until deposit intent succeeded.
* On webhook `payment_intent.succeeded` → `SCHEDULED`.
* Reschedule/cancel honors policy evaluation.

---

## 10. Policy Engine (JSON)

```json
{
  "deposit": { "type": "percent", "value": 25, "min": 2000, "max": 5000 },
  "cancellation": { "windowHours": 24, "feePercent": 50 },
  "noShow": { "feePercent": 100 },
  "buffers": { "beforeMin": 5, "afterMin": 10 }
}
```

**Evaluation Contract:**

```ts
type PolicyInput = { now: Date; apptStart: Date; servicePriceCents: number; action: "cancel"|"reschedule" };
type PolicyResult = { feeCents: number; allowed: boolean; policyVersion: number };
```

---

## 11. Payments

* **Elements:** Card presentment and deposit capture.
* **Deposit Intent:** `POST /payments/deposit-intent { appointmentId }` creates PI for deposit amount.
* **Remainder:** Collected on site or post-visit via link.
* **Webhooks:** `payment_intent.succeeded|failed|requires_action`, `charge.refunded`, `dispute.created`.
* **Evidence:** Store consent PDF, policy snapshots, reminders sent (Event log) for disputes.

---

## 12. Documents & E-Sign

**Templates:** global or tenant, jurisdiction-scoped, effective dates, mandatory blocks.

**Generation Flow:**

1. Resolve template (type, jurisdiction, `effectiveFrom` ≤ now < `effectiveTo`).
2. Merge context (client, treatment, appointment).
3. Validate that **mandatory blocks are present**.
4. Render PDF (server-side headless) and stamp `{tenant, templateVersion, sha256}`.
5. Store JSON + PDF in S3; metadata in `Document`.
6. Create e-sign session; capture signed timestamp + IP + UA.

**API Contract:**

```ts
type GenerateDocumentInput = {
  type: "consent" | "aftercare" | "policy";
  clientId?: string;
  context: Record<string, any>;
  jurisdiction: "UK";
};
type GenerateDocumentOutput = { documentId: string; version: string; stampHash: string; url: string };
```

---

## 13. Client Records & Medical

* Versioned `MedicalHistory` per update.
* On medical update pre-visit: trigger **risk assessment** (AI assisted; deterministic outputs described below).
* Consent requires latest risk review or an explicit override (role-gated).

---

## 14. AI Orchestration

**Purposes:** site copy, service descriptions, SEO meta; pricing assist; medical risk highlighting; doc assembly checks.
**Guardrails:**

* Zod/Pydantic schema validation.
* Prompt versioning `vYYYY.MM.DD`.
* Mandatory legal blocks are non-removable.
* Logging of inputs/outputs (hash) to `ai_generations`.

**Contracts:**

```ts
// Copy/SEO
type CopyInput = { profile: any; services: any[]; city: string; tone: "luxury"|"clinical" };
type CopyOutput = { hero: string; bullets: string[]; metaTitle: string; metaDescription: string };

// Pricing
type PricingInput = { service: string; postcode: string; base: number };
type PricingOutput = { suggested: number; p25: number; p50: number; p75: number };

// Risk
type RiskInput = { medical: any; treatment: string };
type RiskOutput = { flags: {code: string; severity: "low"|"med"|"high"; note: string}[] };

// Document compile guard
type DocCheckInput = { template: any; context: any; mandatory: string[] };
type DocCheckOutput = { ok: boolean; missing: string[] };
```

---

## 15. Notifications & Marketing

**Channels:** Email, SMS, WhatsApp (optional).
**Templates:** MJML/Handlebars with brand tokens.
**Events → Automations:** visual builder persists to JSON graph.

**Automation Schema:**

```json
{
  "trigger": "appointment.scheduled",
  "conditions": [{"field":"service.category","op":"eq","value":"injectables"}],
  "actions": [
    {"type":"email","template":"prep_guide","to":"client.email"},
    {"type":"sms","template":"reminder_24h"}
  ]
}
```

**Quiet Hours:** per tenant setting; scheduler defers sends.

---

## 16. Theming & White-Label

* Tokens: colors, radius, typography, spacing, shadows, motion, imagery.
* Variants: `luxuryNoir`, `ivoryMinimal`, `champagneClassic`.
* Custom domains: automated ACM issuance and CloudFront distribution; DNS validation via API.

---

## 17. Search

* Indexes: `clients`, `appointments`, `documents`.
* Fields: minimal PII; store IDs, display snippets.
* Indexer: worker subscribes to `Event` bus; upserts entities; handles deletes on soft-delete.

---

## 18. Analytics

**Event Types:** `BookingCreated`, `BookingUpdated`, `ConsentGenerated`, `ConsentSigned`, `PaymentSucceeded`, `CampaignSent`, `PageViewed`.
**KPIs Endpoint:** aggregates by tenant, date range; p95 latency < 300ms; pre-compute daily rollups nightly.

---

## 19. Security & Compliance

* **Transport:** TLS 1.2+.
* **At Rest:** Postgres & S3 with AES-256 (KMS).
* **Secrets:** SSM Parameter Store; rotate annually or on exposure.
* **RBAC/ABAC:** enforced in API guards; owner-only actions for templates/policies.
* **Audit:** append-only `Event` table + S3 archive; include actor, IP, UA.
* **GDPR:** export/delete client endpoint; retention rules (consent ≥ 7 years).
* **PCI:** card data handled only by Stripe Elements/Iframes (no server touch).
* **DPIA:** stored in `/docs/DPIA/`.

---

## 20. Performance Budgets

* **Landing pages:** JS ≤ 180KB gzip; LCP < 2.0s; CLS < 0.1.
* **Booking API:** p95 < 350ms read; availability cached 60s.
* **Doc generation:** < 10s end-to-end; async job with progress events.
* **AI short tasks:** < 500ms p95; heavy tasks async.

---

## 21. Frontend Structure Details

### `apps/web/app/(tenant)/[domain]/booking/steps`

* `ServiceStep.tsx` → loads services (RSC shell, client transition).
* `CalendarStep.tsx` → calls `/availability`; handles hover & select; reduced motion support.
* `ClientStep.tsx` → React Hook Form + Zod; dynamic fields for medical pre-screen (per service).
* `PaymentStep.tsx` → Stripe Elements; deposit intent; error surface; success → `SCHEDULED`.

### Booking Store (Zustand)

```ts
type BookingState = {
  service?: Service; slot?: Slot; client?: ClientInput; depositIntentId?: string;
  set: (p: Partial<BookingState>) => void; reset: () => void;
}
```

### Middleware

* `middleware.ts` — resolves tenant by host; sets `x-tenant-id` header to API; handles custom domains.

---

## 22. Backend Structure Details

```
apps/api/src/
├─ auth/            # guards, strategies (OIDC), session mgmt
├─ tenants/         # provisioning, plan limits
├─ brands/
├─ services/
├─ locations/
├─ practitioners/
├─ clients/
├─ medical/
├─ appointments/    # availability service, policy engine
├─ payments/        # stripe integ, webhooks
├─ documents/       # templates, generation, pdf render
├─ esign/           # envelope providers
├─ notifications/   # email/sms sender, templates
├─ marketing/       # campaigns & automations
├─ analytics/       # aggregates & KPI endpoints
├─ search/          # indexers, query endpoints
├─ ai/              # orchestration & guards
├─ files/           # S3 signed URLs
├─ webhooks/        # inbound controllers
└─ common/          # interceptors, pipes, utils
```

**Availability Service Core:**

```ts
async getSlots(input: { tenantId: string; locationId: string; serviceId: string; from: Date; to: Date }) {
  const key = `avail:${input.tenantId}:${input.locationId}:${input.serviceId}:${input.from.toDateString()}`;
  return this.cache.getOrSet(key, async () => {
    const rules = await this.rulesRepo.for(input);
    const busy  = await this.calendarRepo.busy(input);
    return computeSlots(rules, busy, { stepMin: 15 });
  }, 60);
}
```

**Policy Engine:**

```ts
evaluate(input: PolicyInput, cfg: PolicyConfig): PolicyResult { /* deterministic math per JSON */ }
```

**Document Guard:**

```ts
const ok = includesAll(rendered, mandatoryBlocks);
if (!ok) throw new BadRequestException("Missing mandatory legal clauses");
```

---

## 23. Events & Webhooks

**Inbound:** `/webhooks/stripe`, `/webhooks/twilio` with signature verification; retries with exponential backoff; dead-letter queue on failure.

**Outbound:** Post to partner URLs configured per tenant with HMAC signature header. Event payload example:

```json
{
  "id":"evt_123",
  "type":"booking.created",
  "ts":"2025-08-13T12:00:00Z",
  "tenantId":"tn_abc",
  "data":{"appointmentId":"apt_123","clientId":"cl_456"}
}
```

---

## 24. File Storage & Images

* **Buckets:** `s3://mas-public/` (public assets via CloudFront), `s3://mas-private/{tenantId}/...` (documents, PII).
* **Paths:** `/documents/{tenantId}/{documentId}.pdf`, `/images/{tenantId}/{hash}.{ext}`.
* **Transforms:** AVIF/WebP variants; size set: 320, 640, 960, 1280, 1920.

---

## 25. Theming Tokens (Tailwind preset)

```ts
export const theme = {
  colors: {
    background: "#FAFAFA", surface: "#F5F5F5", border: "#E8E8E8",
    text: "#2C2C2C", muted: "#6B6B6B", gold: "#D4AF37", goldWash: "#F8F6F0"
  },
  radius: { sm: "8px", md: "12px", lg: "24px", xl: "32px" },
  shadow: { card: "0 20px 60px rgba(0,0,0,.12)" },
  motion: { curve: "cubic-bezier(0.25,0.46,0.45,0.94)", duration: "300ms" }
};
```

---

## 26. Validation & Error Handling

* **Input:** Zod DTOs on FE; Nest Pipes on BE.
* **Errors:** RFC 7807 Problem+JSON payloads on REST.
* **Idempotency:** Header `Idempotency-Key` on booking/payment endpoints; server stores 24h.

---

## 27. Rate Limiting & Abuse Controls

* **Gateway:** per IP + per tenant; sliding window.
* **Sensitive endpoints:** stricter limits (`/payments`, `/documents/generate`).
* **Bot Mitigation:** reCAPTCHA/turnstile on public forms.

---

## 28. Testing Requirements

* **Unit:** domain services (policy, slotting, doc guard, AI schema validators).
* **Contract:** FE↔API (Pact); API mocks for Stripe/Twilio.
* **E2E:** booking, deposit, consent signing, reschedule/cancel, reminders.
* **Load:** availability @ 200 RPS steady, 1k burst; p95 < 400ms.
* **Accessibility:** WCAG 2.2 AA automated + manual AT passes.

---

## 29. CI/CD Pipelines (GitHub Actions)

**ci.yml:** lint → typecheck → test → build → prisma migrate check → artifact upload.
**cd-prod.yml:** tag push → build Docker images → push ECR → Terraform apply → ECS deploy (blue/green) → health check.
**security-scan.yml:** CodeQL + Trivy.

---

## 30. Infrastructure (Terraform Modules)

```
infra/terraform/modules/
  vpc/               # 3 AZ, private subnets, NAT
  rds/               # Postgres Multi-AZ, parameter groups
  elasticache/       # Redis
  ecs-service/       # API, worker services + ALB
  s3-cloudfront/     # buckets + distributions
  acm/               # certs
  waf/               # rules
  iam/               # roles, policies
envs/{dev,staging,prod}/main.tfvars
```

---

## 31. Observability

* **APM/Logs:** Datadog enabled via sidecar/agent; trace IDs propagated (W3C).
* **RUM:** Datadog in `apps/web` & `apps/admin`.
* **Errors:** Sentry DSN configured FE/BE; release tags.
* **Dashboards:** API latency p50/p95, error rates, queue depth, doc render time, AI latency, email/sms delivery.

---

## 32. Backup & DR

* **Postgres:** PITR; snapshots daily (retain 35).
* **S3:** Versioning + Glacier for `/documents`.
* **Redis:** non-persistent (rebuild on fail).
* **RTO/RPO:** RTO 4h, RPO 15m; restore scripts in `/docs/runbooks/dr.md`.

---

## 33. Permissions Matrix (extract)

| Resource         | OWNER | MANAGER | PRACTITIONER | FRONTDESK | FINANCE |
| ---------------- | :---: | :-----: | :----------: | :-------: | :-----: |
| Services CRUD    |   ✓   |    ✓    |       ✕      |     ✕     |    ✕    |
| Book/Reschedule  |   ✓   |    ✓    |   ✓ (self)   |     ✓     |    ✕    |
| Client Medical   |   ✓   |    ✓    |       ✓      |     ✕     |    ✕    |
| Payments/Refunds |   ✓   |    ✓    |       ✕      |     ✕     |    ✓    |
| Templates        |   ✓   |    ✓    |       ✕      |     ✕     |    ✕    |
| Analytics        |   ✓   |    ✓    |    limited   |  limited  |    ✓    |

---

## 34. Public SDK (packages/sdk)

```ts
export class MASClient {
  constructor(cfg: { baseUrl: string; token: string }) {}
  availability(params: { locationId: string; serviceId: string; from: string; to: string }) {}
  createAppointment(payload: CreateAppointment) {}
  generateDocument(payload: GenerateDocumentInput) {}
  webhooksVerify(signature: string, payload: string): boolean {}
}
```

---

## 35. Environment Variables

`apps/api`

```
NODE_ENV=production
DATABASE_URL=postgres://...
REDIS_URL=redis://...
JWT_SECRET=...
STRIPE_SECRET_KEY=...
STRIPE_WEBHOOK_SECRET=...
SENDGRID_API_KEY=...
TWILIO_ACCOUNT_SID=...
TWILIO_AUTH_TOKEN=...
S3_PRIVATE_BUCKET=...
S3_PUBLIC_BUCKET=...
AWS_REGION=...
OPENAI_API_KEY=...
DATADOG_API_KEY=...
SENTRY_DSN=...
```

`apps/web`

```
NEXT_PUBLIC_STRIPE_PUBLIC_KEY=...
NEXT_PUBLIC_SENTRY_DSN=...
NEXT_PUBLIC_DATADOG_RUM=...
```

---

## 36. Legal Template Structure

```json
{
  "meta": { "type": "consent", "jurisdiction": "UK", "version": "2025.08.01" },
  "blocks": [
    { "id": "intro", "required": true, "text": "..." },
    { "id": "contraindications", "required": true, "text": "..." },
    { "id": "aftercare", "required": true, "text": "..." }
  ],
  "placeholders": ["{CLIENT_NAME}","{DATE}","{TREATMENT}"]
}
```

---

## 37. Accessibility Requirements

* Keyboard navigation for booking steps.
* Visible focus states; reduced-motion variant.
* Form labels & ARIA for inputs; error summaries.
* Contrast ≥ WCAG AA.

---

## 38. Client Portal (web)

* Auth via magic link / OTP (tenant-scoped).
* Views: upcoming/past appointments, reschedule/cancel, documents (download), invoices, preferences & consents.
* Data safety: show only client’s own records by token-bound subject.

---

## 39. Error Catalog (extract)

| Code        | HTTP | Message                 | Notes                             |
| ----------- | ---: | ----------------------- | --------------------------------- |
| MAS-401-001 |  401 | Unauthorized            | Missing/invalid token             |
| MAS-403-LOC |  403 | Forbidden for location  | ABAC scope failure                |
| MAS-409-SLT |  409 | Slot conflict           | Race detected; offer alternatives |
| MAS-422-POL |  422 | Policy violation        | Action not permitted per policy   |
| MAS-429-RT  |  429 | Rate limit exceeded     | Retry after header set            |
| MAS-500-DOC |  500 | Document render failure | Retry queued                      |

---

## 40. Runbooks (Ops)

* **Stripe Webhook Failures:** verify signature → retry (x5, expo) → DLQ → manual replay.
* **Consent Render Failures:** retry (x3) → fallback static template → alert tenant admin.
* **AI Provider Outage:** circuit break → static copy/templates → log `ai.fallback=true`.
* **Domain Provisioning:** if ACM pending > 1h, re-issue; confirm DNS CNAME; purge CloudFront cache after attach.
* **Search Drift:** nightly full reindex job; reconcile counts vs DB.

---

This manual specifies the **required structures, contracts, schemas, interfaces, and controls** for building and operating the Master Aesthetics Suite to spec.

